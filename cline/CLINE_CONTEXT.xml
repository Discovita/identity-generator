<cline-context>
    <rules>
        <rule>
            Never start an import with `from src.`. src is not a module. Also never
            use relative imports beyond a single `.` for same package.  We use
            a setup.py file to implement this standard.  We also indicate in a vscode
            settings file to open all terminals in a venv.
        </rule>
        <rule>
            You're an experienced senior python engineer. You know how to set up
            a python project correctly using best practices. You never use hacks like setting
            environment variables to get scripts to run. You're an expert at how python works
            under the hood and how python scripts are supposed to be run. Moreover, if you see
            a project is not running as you expect, rather than hacking your way toward a solution,
            you criticize the project and fix it to use a correct directory and file structure
            in accordance with best practices for modern python development.
        </rule>
        <rule>Do not use `ls -R`, there are too many files and it will print too much.</rule>
        <rule>Use `pyright src` to check compiler errors and `pytest` to run unit tests after every
            major
            change.
            Also run `pyright test` for the test code. Use strong typing aggressively. Major
            service functions that are expected to be called by other files should define a request
            and response object data structure.</rule>
        <rule> DO NOT use try-except and do not write None-checks. Strong-type everything and use
            Optional[Foo] if it really is an expected case that the Foo can be present or absent.
            Use assertions to coerce to Foo or throw if Foo is not optional according to "business
            logic". A common example of this is XML parsing errors from LLM responses. The issue is
            almost never that the LLM returned a bad response but that the prompt is misaligned with
            the code. In such cases, we need to fail fast (as always) and fix the prompt. <rule>Don't
            let files exceed 100 lines.
                Break them into modules when they reach this point.</rule>
        <rule>Update the
            `reference` section
                of this XML doc with `note`s.</rule>
        </rule>
        <rule>Keep source code files under 100 lines so they are AI assistant-friendly.  When you think a file
            needs to grow larger, split it and make it more modular. 
        </rule>
        <note>
            Frontend environment variables are configured in the top-level .env file and accessed
            in React components using process.env.REACT_APP_* (e.g. process.env.REACT_APP_API_BASE_URL).
            Variables must be prefixed with REACT_APP_ to be accessible in the React application.
        </note>
        <rule>Inline comments are almost always bad and a code smell.  Good code should
            explain itself.
        </rule>
        <rule>No try-excepts.  Fail fast everywhere possible.</rule>
        <rule>Primary git branch is `master`.</rule>
        <rule>NEVER touch css unless I've EXPLICITLY instructed you to work on
        app styling.</rule>
        <rule>When working with CSS, use variables for shared values across components, 
        particularly for colors.  Avoid haphazard use of hard-coded values.
        </rule>
    </rules>

    <long-term-memory>
        <note>
            I'm building a simple API and UI to automate a workflow
            for doing an image face-swap using an existing API.  
        </note>
        <note>
            Start app:
            ```
            <![CDATA[
            cd backend && uvicorn discovita.app:app --reload  # Terminal 1
            cd frontend && npm start                          # Terminal 2
            ]]>
            ```
        </note>
        <note>
          src/scripts/dalle/darth_vader_example.py demonstrates how to generate
            an image and modify the augmented prompts to edit an image by re-prompting
            using the OpenAI client.  This will be necessary when we are implementing
            the parts of the project where the user is providing feedback on images.
        </note>
        <note>
            Project uses Pydantic v2. V1 functions like dict() are not allowed.
            Use model_dump() instead of dict() for serialization.
        </note>
        <note>
            TypeScript types must be regenerated when API signatures change:
            1. After modifying Pydantic models in backend/src/discovita/service/coach/models.py
            2. Run the generate-types script: `npm run generate-types` from frontend/apps/coach directory
            3. Include the updated apiTypes.ts in your PR
            This ensures frontend type safety is maintained with backend changes.
        </note>
    </long-term-memory>
    <current-task>
    Help me troubleshoot the deploy on render.
      <logs>
      To address all issues possible (including breaking changes), run:
  npm audit fix --force
Some issues need review, and may require choosing
a different dependency.
Run `npm audit` for details.
> frontend-root@1.0.0 install:coach
> cd apps/coach && npm install
up to date, audited 1430 packages in 3s
347 packages are looking for funding
  run `npm fund` for details
9 vulnerabilities (2 moderate, 6 high, 1 critical)
To address all issues possible (including breaking changes), run:
  npm audit fix --force
Some issues need review, and may require choosing
a different dependency.
Run `npm audit` for details.
> frontend-root@1.0.0 build:coach
> cd apps/coach && npm run build
> coach-app@1.0.0 build
> react-scripts build
Creating an optimized production build...
One of your dependencies, babel-preset-react-app, is importing the
"@babel/plugin-proposal-private-property-in-object" package without
declaring it in its dependencies. This is currently working because
"@babel/plugin-proposal-private-property-in-object" is already in your
node_modules folder for unrelated reasons, but it may break at any time.
babel-preset-react-app is part of the create-react-app project, which
is not maintianed anymore. It is thus unlikely that this bug will
ever be fixed. Add "@babel/plugin-proposal-private-property-in-object" to
your devDependencies to work around this error. This will make this message
go away.
  
Treating warnings as errors because process.env.CI = true.
Most CI servers set it automatically.
Failed to compile.
[eslint] 
src/components/ChatInterface.tsx
  Line 25:6:  React Hook useEffect has a missing dependency: 'messages.length'. Either include it or remove the dependency array  react-hooks/exhaustive-deps
  Line 32:3:  React Hook useEffect has a missing dependency: 'scrollToBottom'. Either include it or remove the dependency array   react-hooks/exhaustive-deps
npm error Lifecycle script `build` failed with error:
npm error code 1
npm error path /opt/render/project/src/frontend/apps/coach
npm error workspace coach-app@1.0.0
npm error location /opt/render/project/src/frontend/apps/coach
npm error command failed
npm error command sh -c react-scripts build
==> Build failed ðŸ˜ž
==> Common ways to troubleshoot your deploy: https://render.com/docs/troubleshooting-deploys
      </logs>
    </current-task>
</cline-context>
