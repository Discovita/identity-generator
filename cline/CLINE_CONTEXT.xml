<cline-context>
    <rules>
        <!-- These rules are common to all my coding projects. -->
        <rule>
            Never start an import with `from src.`. src is not a module. Also never
            use relative imports beyond a single `.` for same package. We use
            a setup.py file to implement this standard. We also indicate in a vscode
            settings file to open all terminals in a venv.
        </rule>
        <rule>
            You're an experienced senior python engineer. You know how to set up
            a python project correctly using best practices. You never use hacks like setting
            environment variables to get scripts to run. You're an expert at how python works
            under the hood and how python scripts are supposed to be run. Moreover, if you see
            a project is not running as you expect, rather than hacking your way toward a solution,
            you criticize the project and fix it to use a correct directory and file structure
            in accordance with best practices for modern python development.
        </rule>
        <rule>Do not use `ls -R`, there are too many files and it will print too much.</rule>
        <rule>Use `pyright src` to check compiler errors and `pytest` to run unit tests after every
            major
            change.
            Also run `pyright test` for the test code. Use strong typing aggressively. Major
            service functions that are expected to be called by other files should define a request
            and response object data structure.</rule>
        <rule> DO NOT use try-except and do not write None-checks. Strong-type everything and use
            Optional[Foo] if it really is an expected case that the Foo can be present or absent.
            Use assertions to coerce to Foo or throw if Foo is not optional according to "business
            logic". A common example of this is XML parsing errors from LLM responses. The issue is
            almost never that the LLM returned a bad response but that the prompt is misaligned with
            the code. In such cases, we need to fail fast (as always) and fix the prompt. <rule>Don't
            let files exceed 100 lines.
                Break them into modules when they reach this point.</rule>
        <rule>Update the
            `reference` section
                of this XML doc with `note`s.</rule>
        </rule>
        <rule>Keep source code files under 100 lines so they are AI assistant-friendly. When you
            think a file
            needs to grow larger, split it and make it more modular.
        </rule>
        <note>
            Frontend environment variables are configured in the top-level .env file and accessed
            in React components using process.env.REACT_APP_* (e.g.
            process.env.REACT_APP_API_BASE_URL).
            Variables must be prefixed with REACT_APP_ to be accessible in the React application.
        </note>
        <rule>Inline comments are almost always bad and a code smell. Good code should
            explain itself.
        </rule>
        <rule>No try-excepts. Fail fast everywhere possible.</rule>
        <rule>Primary git branch is `master`.</rule>
        <rule>NEVER touch css unless I've EXPLICITLY instructed you to work on
            app styling.</rule>
        <rule>When working with CSS, use variables for shared values across components,
            particularly for colors. Avoid haphazard use of hard-coded values.
        </rule>
        <rule>
          For simple file operations by command line, please batch together
          multiple mkdir / mv commands into a single mutli-line bash command
          so as to avoid wasting time and AI API calls.
        </rule>
    </rules>

    <long-term-memory>
        <!-- -->
        <note>
            I'm building a simple API and UI to automate a workflow
            for doing an image face-swap using an existing API.
        </note>
        <note>
            Start app:
            ```
        <![CDATA[
            cd backend && uvicorn discovita.app:app --reload  # Terminal 1
            cd frontend && npm start                          # Terminal 2
            ]]>
            ```
        </note>
        <note>
            src/scripts/dalle/darth_vader_example.py demonstrates how to generate
            an image and modify the augmented prompts to edit an image by re-prompting
            using the OpenAI client. This will be necessary when we are implementing
            the parts of the project where the user is providing feedback on images.
        </note>
        <note>
            Project uses Pydantic v2. V1 functions like dict() are not allowed.
            Use model_dump() instead of dict() for serialization.
        </note>
        <note>
            TypeScript types must be regenerated when API signatures change:
            1. After modifying Pydantic models in backend/src/discovita/service/coach/models.py
            2. Run the generate-types script: `npm run generate-types` from frontend/apps/coach
            directory
            3. Include the updated apiTypes.ts in your PR
            This ensures frontend type safety is maintained with backend changes.
        </note>
        <note>
        How the coach should work:

The way this works should be quite simple.  

CoachState should have `current_state` which is a `CoachingState` enum value (this is defined in backend/src/discovita/service/coach/models/state.py).  When the LLM wants to transition state, it should simply use the TRANSITION_STATE action from backend/src/discovita/service/coach/models/action.py.  

The entirety of the coach logic is quite easy to describe:

1.  Current coach state + user message is passed to coach service. 
2.  Appropriate prompt is selected by the coach's prompt manager and sent to the LLM, with variables filled in using the current state values. 
3.  LLM returns a response object with a response message and actions. 
4.  Actions are carried out by an action executor.  One of these possible actions is to transition the state.  

        </note>
    </long-term-memory>
    <current-task> 
    Fix all unit tests
      <logs>
      ➜  identity-generator git:(master) ✗ cd backend && pyright src/discovita/service/coach/prompt/models.py
0 errors, 0 warnings, 0 informations 
➜  backend git:(master) ✗ git status
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   src/discovita/service/coach/prompt/models.py
        modified:   src/discovita/service/coach/prompts/shared/identity_instructions.md
        modified:   ../cline/CLINE_CONTEXT.xml

no changes added to commit (use "git add" and/or "git commit -a")
➜  backend git:(master) ✗ cd "/Users/jakemirra/workspace/discovita/identity-generator"
➜  identity-generator git:(master) ✗ 
➜  identity-generator git:(master) ✗ cd backend && python -m pytest test/service_coach -v
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/pytest_asyncio/plugin.py:208: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
================================================================ test session starts ================================================================
platform darwin -- Python 3.11.6, pytest-8.3.3, pluggy-1.5.0 -- /usr/local/bin/python3
cachedir: .pytest_cache
rootdir: /Users/jakemirra/workspace/discovita/identity-generator/backend
configfile: pytest.ini
plugins: asyncio-0.24.0, anyio-4.6.2.post1
asyncio: mode=Mode.STRICT, default_loop_scope=None
collected 0 items / 6 errors                                                                                                                        

====================================================================== ERRORS =======================================================================
____________________________________________ ERROR collecting test/service_coach/test_context_builder.py ____________________________________________
ImportError while importing test module '/Users/jakemirra/workspace/discovita/identity-generator/backend/test/service_coach/test_context_builder.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
test/service_coach/test_context_builder.py:4: in <module>
    from discovita.service.coach.models import (
E   ImportError: cannot import name 'ChatMessage' from 'discovita.service.coach.models' (/Users/jakemirra/workspace/discovita/identity-generator/backend/src/discovita/service/coach/models/__init__.py)
____________________________________________ ERROR collecting test/service_coach/test_context_models.py _____________________________________________
ImportError while importing test module '/Users/jakemirra/workspace/discovita/identity-generator/backend/test/service_coach/test_context_models.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
test/service_coach/test_context_models.py:3: in <module>
    from discovita.service.coach.models import (
E   ImportError: cannot import name 'CoachContext' from 'discovita.service.coach.models' (/Users/jakemirra/workspace/discovita/identity-generator/backend/src/discovita/service/coach/models/__init__.py)
________________________________________________ ERROR collecting test/service_coach/test_models.py _________________________________________________
ImportError while importing test module '/Users/jakemirra/workspace/discovita/identity-generator/backend/test/service_coach/test_models.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
test/service_coach/test_models.py:4: in <module>
    from discovita.service.coach.models import (
E   ImportError: cannot import name 'ChatMessage' from 'discovita.service.coach.models' (/Users/jakemirra/workspace/discovita/identity-generator/backend/src/discovita/service/coach/models/__init__.py)
____________________________________________ ERROR collecting test/service_coach/test_prompt_manager.py _____________________________________________
ImportError while importing test module '/Users/jakemirra/workspace/discovita/identity-generator/backend/test/service_coach/test_prompt_manager.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
test/service_coach/test_prompt_manager.py:9: in <module>
    from discovita.service.coach.models import CoachingState, ActionType, CoachContext
E   ImportError: cannot import name 'CoachContext' from 'discovita.service.coach.models' (/Users/jakemirra/workspace/discovita/identity-generator/backend/src/discovita/service/coach/models/__init__.py)
________________________________________________ ERROR collecting test/service_coach/test_service.py ________________________________________________
ImportError while importing test module '/Users/jakemirra/workspace/discovita/identity-generator/backend/test/service_coach/test_service.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
test/service_coach/test_service.py:7: in <module>
    from discovita.service.coach.models import (
E   ImportError: cannot import name 'ChatMessage' from 'discovita.service.coach.models' (/Users/jakemirra/workspace/discovita/identity-generator/backend/src/discovita/service/coach/models/__init__.py)
_____________________________________________ ERROR collecting test/service_coach/test_state_machine.py _____________________________________________
ImportError while importing test module '/Users/jakemirra/workspace/discovita/identity-generator/backend/test/service_coach/test_state_machine.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
test/service_coach/test_state_machine.py:5: in <module>
    from discovita.service.coach.models import (
E   ImportError: cannot import name 'TransitionCondition' from 'discovita.service.coach.models' (/Users/jakemirra/workspace/discovita/identity-generator/backend/src/discovita/service/coach/models/__init__.py)
============================================================== short test summary info ==============================================================
ERROR test/service_coach/test_context_builder.py
ERROR test/service_coach/test_context_models.py
ERROR test/service_coach/test_models.py
ERROR test/service_coach/test_prompt_manager.py
ERROR test/service_coach/test_service.py
ERROR test/service_coach/test_state_machine.py
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 6 errors during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
================================================================= 6 errors in 0.70s =================================================================
➜  backend git:(master) ✗ cd backend && python -m pytest test/service_coach -v
      <logs>

      Fix all unit tests
    </current-task>
</cline-context>
