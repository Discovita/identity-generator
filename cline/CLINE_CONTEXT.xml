<cline-context>
    <rules>
        <rule>
            Never start an import with `from src.`. src is not a module. Also never
            use relative imports beyond a single `.` for same package.  We use
            a setup.py file to implement this standard.  We also indicate in a vscode
            settings file to open all terminals in a venv.
        </rule>
        <rule>
            You're an experienced senior python engineer. You know how to set up
            a python project correctly using best practices. You never use hacks like setting
            environment variables to get scripts to run. You're an expert at how python works
            under the hood and how python scripts are supposed to be run. Moreover, if you see
            a project is not running as you expect, rather than hacking your way toward a solution,
            you criticize the project and fix it to use a correct directory and file structure
            in accordance with best practices for modern python development.
        </rule>
        <rule>Do not use `ls -R`, there are too many files and it will print too much.</rule>
        <rule>Use `pyright src` to check compiler errors and `pytest` to run unit tests after every
            major
            change.
            Also run `pyright test` for the test code. Use strong typing aggressively. Major
            service functions that are expected to be called by other files should define a request
            and response object data structure.</rule>
        <rule> DO NOT use try-except and do not write None-checks. Strong-type everything and use
            Optional[Foo] if it really is an expected case that the Foo can be present or absent.
            Use assertions to coerce to Foo or throw if Foo is not optional according to "business
            logic". A common example of this is XML parsing errors from LLM responses. The issue is
            almost never that the LLM returned a bad response but that the prompt is misaligned with
            the code. In such cases, we need to fail fast (as always) and fix the prompt. <rule>Don't
            let files exceed 100 lines.
                Break them into modules when they reach this point.</rule>
        <rule>Update the
            `reference` section
                of this XML doc with `note`s.</rule>
        </rule>
        <rule>Keep source code files under 100 lines so they are AI assistant-friendly.  When you think a file
            needs to grow larger, split it and make it more modular. 
        </rule>
        <rule>Inline comments are almost always bad and a code smell.  Good code should
            explain itself.
        </rule>
        <rule>No try-excepts.  Fail fast everywhere possible.</rule>
        <rule>Primary git branch is `master`.</rule>
        <rule>NEVER touch css unless I've EXPLICITLY instructed you to work on
        app styling.</rule>
    </rules>

    <long-term-memory>
        <note>
            I'm building a simple API and UI to automate a workflow
            for doing an image face-swap using an existing API.  
        </note>
        <note>
            Start app:
            ```
            cd backend && uvicorn discovita.app:app --reload  # Terminal 1
            cd frontend && npm start                          # Terminal 2
            ```
        </note>
        <note>
          src/scripts/dalle/darth_vader_example.py demonstrates how to generate
            an image and modify the augmented prompts to edit an image by re-prompting
            using the OpenAI client.  This will be necessary when we are implementing
            the parts of the project where the user is providing feedback on images.
        </note>
    </long-term-memory>
    <last-task>
      Review cline/adalo_api_docs.  Write a script in backend/scripts/adalo/main.py
      that uses a new client which you'll implement in backend/scripts/adalo/client.py
      to do some example requests to the Adalo API.  Log the requests and any errors
      or responses.
    </last-task>
    <last-task>
      The last task was almost completed, but scripts/main.py does not
      correctly use .env for config.  It shouldn't actually need to use
      .env at all; the Adalo client should have a default constructor
      that correctly gets environment variables from the .env file. 
      Fix it as such.
    </last-task>
    <current-task>
      Script is almost working, now getting this output. 
      Help me trouble-shoot.  Start by having the client print
      the output to logs.   Make a new backend/logs/adalo.log
      file for this client.
      <output>
      python -m scripts.adalo.main
2025-02-07 15:58:00,733 [INFO] Fetching users...
2025-02-07 15:58:02,779 [INFO] HTTP Request: GET https://api.adalo.com/v0/apps/e16b822a-3562-4df3-b1d0-fa5d749a75c8/collections/t_8200ffc0140b491aaac8db5b6d8d5ded?offset=0&limit=2 "HTTP/1.1 200 OK"
Traceback (most recent call last):
  File "<frozen runpy>", line 198, in _run_module_as_main
  File "<frozen runpy>", line 88, in _run_code
  File "/Users/jakemirra/workspace/discovita/identity-generator/backend/scripts/adalo/main.py", line 40, in <module>
    main()
  File "/Users/jakemirra/workspace/discovita/identity-generator/backend/scripts/adalo/main.py", line 16, in main
    users_response = client.get_users(limit=2)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/jakemirra/workspace/discovita/identity-generator/backend/src/discovita/service/adalo/client.py", line 35, in get_users
    return GetUsersResponse.parse_obj(response.json())
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "pydantic/main.py", line 532, in pydantic.main.BaseModel.parse_obj
  File "pydantic/main.py", line 347, in pydantic.main.BaseModel.__init__
pydantic.error_wrappers.ValidationError: 14 validation errors for GetUsersResponse
records -> 0 -> Full_Name
  field required (type=value_error.missing)
records -> 0 -> Admin
  none is not an allowed value (type=type_error.none.not_allowed)
records -> 0 -> Daily_Reminder
  field required (type=value_error.missing)
records -> 0 -> show_identity
  field required (type=value_error.missing)
records -> 0 -> Download_identity_count
  field required (type=value_error.missing)
records -> 0 -> Turn_On
  field required (type=value_error.missing)
records -> 0 -> AI_Image_Copy
  field required (type=value_error.missing)
records -> 1 -> Full_Name
  field required (type=value_error.missing)
records -> 1 -> Admin
  none is not an allowed value (type=type_error.none.not_allowed)
records -> 1 -> Daily_Reminder
  field required (type=value_error.missing)
records -> 1 -> show_identity
  field required (type=value_error.missing)
records -> 1 -> Download_identity_count
  field required (type=value_error.missing)
records -> 1 -> Turn_On
  field required (type=value_error.missing)
records -> 1 -> AI_Image_Copy
  field required (type=value_error.missing)
      </output>
    </current-task>
</cline-context>
