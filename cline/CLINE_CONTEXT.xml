<cline-context>
    <rules>
        <!-- These rules are common to all my coding projects. -->
        <rule>
            Never start an import with `from src.`. src is not a module. Also never
            use relative imports beyond a single `.` for same package. We use
            a setup.py file to implement this standard. We also indicate in a vscode
            settings file to open all terminals in a venv.
        </rule>
        <rule>
            You're an experienced senior python engineer. You know how to set up
            a python project correctly using best practices. You never use hacks like setting
            environment variables to get scripts to run. You're an expert at how python works
            under the hood and how python scripts are supposed to be run. Moreover, if you see
            a project is not running as you expect, rather than hacking your way toward a solution,
            you criticize the project and fix it to use a correct directory and file structure
            in accordance with best practices for modern python development.
        </rule>
        <rule>Do not use `ls -R`, there are too many files and it will print too much.</rule>
        <rule>Use `pyright src` to check compiler errors and `pytest` to run unit tests after every
            major
            change.
            Also run `pyright test` for the test code. Use strong typing aggressively. Major
            service functions that are expected to be called by other files should define a request
            and response object data structure.</rule>
        <rule> DO NOT use try-except and do not write None-checks. Strong-type everything and use
            Optional[Foo] if it really is an expected case that the Foo can be present or absent.
            Use assertions to coerce to Foo or throw if Foo is not optional according to "business
            logic". A common example of this is XML parsing errors from LLM responses. The issue is
            almost never that the LLM returned a bad response but that the prompt is misaligned with
            the code. In such cases, we need to fail fast (as always) and fix the prompt. <rule>Don't
            let files exceed 100 lines.
                Break them into modules when they reach this point.</rule>
        <rule>Update the
            `reference` section
                of this XML doc with `note`s.</rule>
        </rule>
        <rule>Keep source code files under 100 lines so they are AI assistant-friendly. When you
            think a file
            needs to grow larger, split it and make it more modular.
        </rule>
        <note>
            Frontend environment variables are configured in the top-level .env file and accessed
            in React components using process.env.REACT_APP_* (e.g.
            process.env.REACT_APP_API_BASE_URL).
            Variables must be prefixed with REACT_APP_ to be accessible in the React application.
        </note>
        <rule>Inline comments are almost always bad and a code smell. Good code should
            explain itself.
        </rule>
        <rule>No try-excepts. Fail fast everywhere possible.</rule>
        <rule>Primary git branch is `master`.</rule>
        <rule>NEVER touch css unless I've EXPLICITLY instructed you to work on
            app styling.</rule>
        <rule>When working with CSS, use variables for shared values across components,
            particularly for colors. Avoid haphazard use of hard-coded values.
        </rule>
        <rule>
          For simple file operations by command line, please batch together
          multiple mkdir / mv commands into a single mutli-line bash command
          so as to avoid wasting time and AI API calls.
        </rule>
    </rules>

    <long-term-memory>
        <!-- -->
        <note>
            I'm building a simple API and UI to automate a workflow
            for doing an image face-swap using an existing API.
        </note>
        <note>
            Start app:
            ```
        <![CDATA[
            cd backend && uvicorn discovita.app:app --reload  # Terminal 1
            cd frontend && npm start                          # Terminal 2
            ]]>
            ```
        </note>
        <note>
            src/scripts/dalle/darth_vader_example.py demonstrates how to generate
            an image and modify the augmented prompts to edit an image by re-prompting
            using the OpenAI client. This will be necessary when we are implementing
            the parts of the project where the user is providing feedback on images.
        </note>
        <note>
            Project uses Pydantic v2. V1 functions like dict() are not allowed.
            Use model_dump() instead of dict() for serialization.
        </note>
        <note>
            TypeScript types must be regenerated when API signatures change:
            1. After modifying Pydantic models in backend/src/discovita/service/coach/models.py
            2. Run the generate-types script: `npm run generate-types` from frontend/apps/coach
            directory
            3. Include the updated apiTypes.ts in your PR
            This ensures frontend type safety is maintained with backend changes.
        </note>
        <note>
        How the coach should work:

The way this works should be quite simple.  

CoachState should have `current_state` which is a `CoachingState` enum value (this is defined in backend/src/discovita/service/coach/models/state.py).  When the LLM wants to transition state, it should simply use the TRANSITION_STATE action from backend/src/discovita/service/coach/models/action.py.  

The entirety of the coach logic is quite easy to describe:

1.  Current coach state + user message is passed to coach service. 
2.  Appropriate prompt is selected by the coach's prompt manager and sent to the LLM, with variables filled in using the current state values. 
3.  LLM returns a response object with a response message and actions. 
4.  Actions are carried out by an action executor.  One of these possible actions is to transition the state.  

        </note>
    </long-term-memory>
    <gather-context-instructions>
        Familiarize yourself with

        cline/coach_planning/state_machine_planning/v1

        Print out the file tree for your reference, from this directory.

        Particularly, read

        cline/coach_planning/state_machine_planning/v1/plan/master_plan_v1.md
        cline/coach_planning/state_machine_planning/v1/implementation_plan/master_plan_v1_impl.md
        We will be carrying out the steps
        cline/coach_planning/state_machine_planning/v1/implementation_plan/steps

        For each step we will be making a non-breaking PR against the codebase.
        You may use version-gating if needed to avoid breaking the server, but
        avoid that when it is not needed.

        Avoid over-engineering and make the code testable by unit tests, and test it.

        After each step we leave one or more notes about what we did.
        We just finished Step 1, which resulted in these summaries, which
        you should read:
        cline/coach_planning/state_machine_planning/v1/implementation_plan/steps/01_core_models/summary_of_changes.md
        cline/coach_planning/state_machine_planning/v1/implementation_plan/steps/01_core_models/alignment_with_next_steps.md

        Aggressively simplify all code.  Do not overcomplicate.  This version of the coach
        is going to be quite simple: (1) no database, just passing JSON between
        front-end and backend where front-end sends current state and user message
        and backend returns updated state and coach message (and any other needed metadata
        for the front-end to show). (2) Key internal feature of the coach will be
        a prompt manager which uses specialized prompts so that the coach has specialized
        instructions for each stage of coaching.  (3) We're only going to have three
        stages: (a) Introduction, (b) Brainstorming session (user comes up with 5 identities
        through conversation with the coach), and (c) identity creation, where the coach
        goes through the identities one at a time with the user and gets user buy-in 
        on each identity, at the end of which the coach uses a "CREATE_IDENTITY" "action"
        (we won't even implement this yet, just indicate that the coach would make
        a function call that we'll implement later to actually create an identity - however,
        we will shove the "identity" into the coach state so that it can at least be 
        viewed and tested in test mode), and (d) conclusion where the coach reviews
        what they came up with and indicates that more features are coming soon.
    </gather-context-instructions>
    <tasks-already-done>
        <task>
            Carry out the implementation plan for Step 1:
            cline/coach_planning/state_machine_planning/v1/implementation_plan/steps/01_core_models.md
            Do not go further than that. We'll be merging this code before we continue.
        </task>
        <task>
            Carry out Step 2 as we did Step 1.  In particular, when you're finished, write 
            files analogous to

            cline/coach_planning/state_machine_planning/v1/implementation_plan/steps/01_core_models/summary_of_changes.md
            cline/coach_planning/state_machine_planning/v1/implementation_plan/steps/01_core_models/alignment_with_next_steps.md

            in the step 2 directory.
        </task>
        <task>
            Carry out Step 3 analogous to Step 2 above.

            I believe you've already gotten started on this task.  You may even
            have already finished for all you know.  Write
            ./cline/progress_report.md with your assessment of what's been done 
            already and what remains to be done for Step 3 once you understand
            Step 3.
        </task>
        <task>
            There is significant overlaps bewteen Steps 7 (persistence layer)
            and step 4 (context manager).  

            Rename cline/coach_planning/state_machine_planning/v1/implementation_plan/steps/07_persistence_layer
            to .../04A (we will just append the letter A to insert it before step 04).

            Review Step 04 and ensure it is aligned with and uses the models
            and concepts we will develop in the persistence layer.
        </task>
        <task>
          Remove all references to persistence (database) layer.  This entire 
          version of the coach will not make any use of the database.  

          The six steps will now simply be:

          cline/coach_planning/state_machine_planning/v1/implementation_plan/steps/01_core_models
          cline/coach_planning/state_machine_planning/v1/implementation_plan/steps/02_state_machine
          cline/coach_planning/state_machine_planning/v1/implementation_plan/steps/03_prompt_manager
          cline/coach_planning/state_machine_planning/v1/implementation_plan/steps/04_service_layer
          cline/coach_planning/state_machine_planning/v1/implementation_plan/steps/05_api_layer
          cline/coach_planning/state_machine_planning/v1/implementation_plan/steps/06_frontend_integration
        </task>
        <task> 
        Carry out Step 4, implement the service layer.  

        I just checked that there are no compiler errors in the project currently.

        Ensure there aren't any before completing.
        </task>
        <task>
          If there is ever a mismatch between what is in an LLM structured response prompt
          and what our code expects, always first assume the issue is with
          the accuracy of the prompt rather than our code.
        </task>

    </tasks-already-done>
    <current-task> 
      During identity brainstorming and identity refinement, 

      I would like the coach to ADD_IDENTITY_NOTE whenever it believes
      it has learned valuable information about how the user perceives
      a certain identity that they have already created. 

      1.  When using the CREATE_IDENTITY action, add a required `note`
      field for the first note, indicating why the coach created this
      identity for the user.  This will be the first note in the array
      of notes that will eventually be created for the identity. 

      2.  At any time during brainstorming and coaching, ADD_IDENTITY_NOTE
      can be used to save (append) a new piece of information about the given
      identity.  

      First update the actions and action handler code to support these
      features; then make sure the prompts are updated so the coach knows
      it can use this feature during identity brainstorming
      and identity refinement stages.

      Before you begin, read cline/coach_planning/identity_note_context.md
      which has valuable context for this task.
    </current-task>
</cline-context>
