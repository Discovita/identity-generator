<cline-context>
    <rules>
        <rule>
            Never start an import with `from src.`. src is not a module. Also never
            use relative imports beyond a single `.` for same package.  We use
            a setup.py file to implement this standard.  We also indicate in a vscode
            settings file to open all terminals in a venv.
        </rule>
        <rule>
            You're an experienced senior python engineer. You know how to set up
            a python project correctly using best practices. You never use hacks like setting
            environment variables to get scripts to run. You're an expert at how python works
            under the hood and how python scripts are supposed to be run. Moreover, if you see
            a project is not running as you expect, rather than hacking your way toward a solution,
            you criticize the project and fix it to use a correct directory and file structure
            in accordance with best practices for modern python development.
        </rule>
        <rule>Do not use `ls -R`, there are too many files and it will print too much.</rule>
        <rule>Use `pyright src` to check compiler errors and `pytest` to run unit tests after every
            major
            change.
            Also run `pyright test` for the test code. Use strong typing aggressively. Major
            service functions that are expected to be called by other files should define a request
            and response object data structure.</rule>
        <rule> DO NOT use try-except and do not write None-checks. Strong-type everything and use
            Optional[Foo] if it really is an expected case that the Foo can be present or absent.
            Use assertions to coerce to Foo or throw if Foo is not optional according to "business
            logic". A common example of this is XML parsing errors from LLM responses. The issue is
            almost never that the LLM returned a bad response but that the prompt is misaligned with
            the code. In such cases, we need to fail fast (as always) and fix the prompt. <rule>Don't
            let files exceed 100 lines.
                Break them into modules when they reach this point.</rule>
        <rule>Update the
            `reference` section
                of this XML doc with `note`s.</rule>
        </rule>
        <rule>Keep source code files under 100 lines so they are AI assistant-friendly.  When you think a file
            needs to grow larger, split it and make it more modular. 
        </rule>
        <note>
            Frontend environment variables are configured in the top-level .env file and accessed
            in React components using process.env.REACT_APP_* (e.g. process.env.REACT_APP_API_BASE_URL).
            Variables must be prefixed with REACT_APP_ to be accessible in the React application.
        </note>
        <rule>Inline comments are almost always bad and a code smell.  Good code should
            explain itself.
        </rule>
        <rule>No try-excepts.  Fail fast everywhere possible.</rule>
        <rule>Primary git branch is `master`.</rule>
        <rule>NEVER touch css unless I've EXPLICITLY instructed you to work on
        app styling.</rule>
        <rule>The ./cline directory has files you may reference which describe
        product goals and implementation strategies in detail.  Do not ever try
        to read files in any subdirectories titled "archive" as they are no
        longer relevant. 
        </rule>
    </rules>

    <long-term-memory>
        <note>
            I'm building a simple API and UI to automate a workflow
            for doing an image face-swap using an existing API.  
        </note>
        <note>
            Start app:
            ```
            <![CDATA[
            cd backend && uvicorn discovita.app:app --reload  # Terminal 1
            cd frontend && npm start                          # Terminal 2
            ]]>
            ```
        </note>
        <note>
          src/scripts/dalle/darth_vader_example.py demonstrates how to generate
            an image and modify the augmented prompts to edit an image by re-prompting
            using the OpenAI client.  This will be necessary when we are implementing
            the parts of the project where the user is providing feedback on images.
        </note>
        <note>
            Project uses Pydantic v2. V1 functions like dict() are not allowed.
            Use model_dump() instead of dict() for serialization.
        </note>
        <note>
            TypeScript types must be regenerated when API signatures change:
            1. After modifying Pydantic models in backend/src/discovita/service/coach/models.py
            2. Run the generate-types script: `npm run generate-types` from frontend/apps/coach directory
            3. Include the updated apiTypes.ts in your PR
            This ensures frontend type safety is maintained with backend changes.
        </note>

    </long-term-memory>
    <current-task>
        Re-read:
        cline/coach_planning/coach_plan_start.txt

        We wrote a technical plan together.  Read it as well:
        cline/coach_planning/coach_plan_technical.md

        <steps-already-done>
          <step>Added pydantic and corresponding typescript models.</step>
          <step>Split coach service into focused modules.</step>
          <step>Added sample dialogue and tests.</step>
          <step>Implemented initial coach service structure with:
            - Enhanced models for identity tracking
            - Split service into focused modules (context_builder, identity_processor)
            - Updated API route
            - Added sample dialogue
            - Created test files
          </step>
          <step>Implemented identity extraction and visualization in identity_processor.py:
            - Added category detection from response text
            - Implemented "I am" statement parsing
            - Added prefix stripping (a/an)
            - Added visualization generation
          </step>
          <step>Added coach_chat_logic_trace.md documenting the request lifecycle</step>
          <step>Built a test wrapper for the coach app so that we can 
          easily inject state into the app to test certain functionality
          easily.</step>
          <step>
            We wrote cline/identity_extraction_trace.md that summarizes
            the steps we're taking to empower the coach to extract 
            identities for the user.  
          </step>
          <step>
          Coach app correctly renders markdown when the chatbot's response is 
          in markdown format.
          </step>
        </steps-already-done>
        <current-step-within-task>
            I took steps to introduce strong-typed OpenAI chatbot responses
            so that we can impose structure and allow the AI to make certain
            decisions and actions for the user.  

            In particular, the "coach" is supposed to be able to create 
            "identities" for the user.  

            I have a complete, or at least partial, implementation of 
            this but need a robust test script to test it out. 

            Write a script (.../backend/scripts/identity_tests) which
            runs the backend server and does a dialogue geared toward
            generating an identity, "I am a talented engineer".  The 
            aim of the test is to ensure that the coach returns a 
            an identity.

            This script will make LIVE calls to my coach API which
            will make LIVE calls to OpenAI - it is NOT a unit test.
            
            Make the script interactive.  Print out the last response
            from the coach AND any identities that were generated,
            then (a) terminate if the test was successful and the 
            engineer identity was created, or (b) allow the user (me)
            to type a message into the terminal to further confirm
            that I want to create an identity.

            Update: the script is already written BUT we revealed the API
            request to the coach is falling over with a 500.  

            Troubleshoot:
            
            <error>
            [backend] INFO:     127.0.0.1:57203 - "GET /api/v1/health HTTP/1.1" 200 OK
[backend] INFO:     127.0.0.1:57205 - "POST /api/v1/coach/user_input HTTP/1.1" 500 Internal Server Error
[backend] ERROR:    Exception in ASGI application
[backend] Traceback (most recent call last):
[backend]   File "/Users/jakemirra/workspace/discovita/identity-generator/backend/venv/lib/python3.11/site-packages/uvicorn/protocols/http/h11_impl.py", line 403, in run_asgi
[backend]     result = await app(  # type: ignore[func-returns-value]
[backend]              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[backend]   File "/Users/jakemirra/workspace/discovita/identity-generator/backend/venv/lib/python3.11/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
[backend]     return await self.app(scope, receive, send)
[backend]            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[backend]   File "/Users/jakemirra/workspace/discovita/identity-generator/backend/venv/lib/python3.11/site-packages/fastapi/applications.py", line 1054, in __call__
[backend]     await super().__call__(scope, receive, send)
[backend]   File "/Users/jakemirra/workspace/discovita/identity-generator/backend/venv/lib/python3.11/site-packages/starlette/applications.py", line 112, in __call__
[backend]     await self.middleware_stack(scope, receive, send)
[backend]   File "/Users/jakemirra/workspace/discovita/identity-generator/backend/venv/lib/python3.11/site-packages/starlette/middleware/errors.py", line 187, in __call__
[backend]     raise exc
[backend]   File "/Users/jakemirra/workspace/discovita/identity-generator/backend/venv/lib/python3.11/site-packages/starlette/middleware/errors.py", line 165, in __call__
[backend]     await self.app(scope, receive, _send)
[backend]   File "/Users/jakemirra/workspace/discovita/identity-generator/backend/venv/lib/python3.11/site-packages/starlette/middleware/cors.py", line 85, in __call__
[backend]     await self.app(scope, receive, send)
[backend]   File "/Users/jakemirra/workspace/discovita/identity-generator/backend/venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
[backend]     await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
[backend]   File "/Users/jakemirra/workspace/discovita/identity-generator/backend/venv/lib/python3.11/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
[backend]     raise exc
[backend]   File "/Users/jakemirra/workspace/discovita/identity-generator/backend/venv/lib/python3.11/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
[backend]     await app(scope, receive, sender)
[backend]   File "/Users/jakemirra/workspace/discovita/identity-generator/backend/venv/lib/python3.11/site-packages/starlette/routing.py", line 715, in __call__
[backend]     await self.middleware_stack(scope, receive, send)
[backend]   File "/Users/jakemirra/workspace/discovita/identity-generator/backend/venv/lib/python3.11/site-packages/starlette/routing.py", line 735, in app
[backend]     await route.handle(scope, receive, send)
[backend]   File "/Users/jakemirra/workspace/discovita/identity-generator/backend/venv/lib/python3.11/site-packages/starlette/routing.py", line 288, in handle
[backend]     await self.app(scope, receive, send)
[backend]   File "/Users/jakemirra/workspace/discovita/identity-generator/backend/venv/lib/python3.11/site-packages/starlette/routing.py", line 76, in app
[backend]     await wrap_app_handling_exceptions(app, request)(scope, receive, send)
[backend]   File "/Users/jakemirra/workspace/discovita/identity-generator/backend/venv/lib/python3.11/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
[backend]     raise exc
[backend]   File "/Users/jakemirra/workspace/discovita/identity-generator/backend/venv/lib/python3.11/site-packages/starlette/_exception_handler.py", line 42, in wrapped_app
[backend]     await app(scope, receive, sender)
[backend]   File "/Users/jakemirra/workspace/discovita/identity-generator/backend/venv/lib/python3.11/site-packages/starlette/routing.py", line 73, in app
[backend]     response = await f(request)
[backend]                ^^^^^^^^^^^^^^^^
[backend]   File "/Users/jakemirra/workspace/discovita/identity-generator/backend/venv/lib/python3.11/site-packages/fastapi/routing.py", line 301, in app
[backend]     raw_response = await run_endpoint_function(
[backend]                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[backend]   File "/Users/jakemirra/workspace/discovita/identity-generator/backend/venv/lib/python3.11/site-packages/fastapi/routing.py", line 212, in run_endpoint_function
[backend]     return await dependant.call(**values)
[backend]            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[backend]   File "/Users/jakemirra/workspace/discovita/identity-generator/backend/src/discovita/api/routes/coach.py", line 16, in handle_user_input
[backend]     return await service.get_response(request)
[backend]            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[backend]   File "/Users/jakemirra/workspace/discovita/identity-generator/backend/src/discovita/service/coach/service.py", line 27, in get_response
[backend]     structured_response = await self.client.get_structured_completion(
[backend]                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[backend]   File "/Users/jakemirra/workspace/discovita/identity-generator/backend/src/discovita/service/openai/client/client.py", line 46, in get_structured_completion
[backend]     return await self.ops.get_structured_completion(
[backend]            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[backend]   File "/Users/jakemirra/workspace/discovita/identity-generator/backend/src/discovita/service/openai/client/operations/chat.py", line 39, in get_structured_completion
[backend]     schema_instruction = response_model.get_prompt_instruction()
[backend]                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[backend]   File "/Users/jakemirra/workspace/discovita/identity-generator/backend/venv/lib/python3.11/site-packages/pydantic/_internal/_model_construction.py", line 264, in __getattr__
[backend]     raise AttributeError(item)
[backend] AttributeError: get_prompt_instruction
            </error>
        </current-step-within-task>
    </current-task>
</cline-context>
