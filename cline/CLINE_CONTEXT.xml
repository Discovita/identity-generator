<cline-context>
    <rules>
        <rule>
            Never start an import with `from src.`. src is not a module. Also never
            use relative imports beyond a single `.` for same package.  We use
            a setup.py file to implement this standard.  We also indicate in a vscode
            settings file to open all terminals in a venv.
        </rule>
        <rule>
            You're an experienced senior python engineer. You know how to set up
            a python project correctly using best practices. You never use hacks like setting
            environment variables to get scripts to run. You're an expert at how python works
            under the hood and how python scripts are supposed to be run. Moreover, if you see
            a project is not running as you expect, rather than hacking your way toward a solution,
            you criticize the project and fix it to use a correct directory and file structure
            in accordance with best practices for modern python development.
        </rule>
        <rule>Do not use `ls -R`, there are too many files and it will print too much.</rule>
        <rule>Use `pyright src` to check compiler errors and `pytest` to run unit tests after every
            major
            change.
            Also run `pyright test` for the test code. Use strong typing aggressively. Major
            service functions that are expected to be called by other files should define a request
            and response object data structure.</rule>
        <rule> DO NOT use try-except and do not write None-checks. Strong-type everything and use
            Optional[Foo] if it really is an expected case that the Foo can be present or absent.
            Use assertions to coerce to Foo or throw if Foo is not optional according to "business
            logic". A common example of this is XML parsing errors from LLM responses. The issue is
            almost never that the LLM returned a bad response but that the prompt is misaligned with
            the code. In such cases, we need to fail fast (as always) and fix the prompt. <rule>Don't
            let files exceed 100 lines.
                Break them into modules when they reach this point.</rule>
        <rule>Update the
            `reference` section
                of this XML doc with `note`s.</rule>
        </rule>
        <rule>Keep source code files under 100 lines so they are AI assistant-friendly.  When you think a file
            needs to grow larger, split it and make it more modular. 
        </rule>
        <rule>Inline comments are almost always bad and a code smell.  Good code should
            explain itself.
        </rule>
        <rule>No try-excepts.  Fail fast everywhere possible.</rule>
        <rule>Primary git branch is `master`.</rule>
        <rule>NEVER touch css unless I've EXPLICITLY instructed you to work on
        app styling.</rule>
    </rules>

    <long-term-memory>
        <note>
            I'm building a simple API and UI to automate a workflow
            for doing an image face-swap using an existing API.  
        </note>
        <note>
            Start app:
            ```
            cd backend && uvicorn discovita.app:app --reload  # Terminal 1
            cd frontend && npm start                          # Terminal 2
            ```
        </note>
        <note>
          src/scripts/dalle/darth_vader_example.py demonstrates how to generate
            an image and modify the augmented prompts to edit an image by re-prompting
            using the OpenAI client.  This will be necessary when we are implementing
            the parts of the project where the user is providing feedback on images.
        </note>
    </long-term-memory>
    <current-task>
    Help me troubleshoot my deploy.  First make sure it works locally.

    <server-deploy-logs>
      ==> Running './scripts/render_deploy/start.sh'
Traceback (most recent call last):
  File "/opt/render/project/src/backend/.venv/bin/uvicorn", line 8, in <module>
    sys.exit(main())
             ^^^^^^
  File "/opt/render/project/src/backend/.venv/lib/python3.11/site-packages/click/core.py", line 1161, in __call__
    return self.main(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/render/project/src/backend/.venv/lib/python3.11/site-packages/click/core.py", line 1082, in main
    rv = self.invoke(ctx)
         ^^^^^^^^^^^^^^^^
  File "/opt/render/project/src/backend/.venv/lib/python3.11/site-packages/click/core.py", line 1443, in invoke
    return ctx.invoke(self.callback, **ctx.params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/render/project/src/backend/.venv/lib/python3.11/site-packages/click/core.py", line 788, in invoke
    return __callback(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/render/project/src/backend/.venv/lib/python3.11/site-packages/uvicorn/main.py", line 412, in main
    run(
  File "/opt/render/project/src/backend/.venv/lib/python3.11/site-packages/uvicorn/main.py", line 579, in run
    server.run()
  File "/opt/render/project/src/backend/.venv/lib/python3.11/site-packages/uvicorn/server.py", line 66, in run
    return asyncio.run(self.serve(sockets=sockets))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/asyncio/runners.py", line 190, in run
    return runner.run(main)
           ^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/asyncio/runners.py", line 118, in run
    return self._loop.run_until_complete(task)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/render/project/src/backend/.venv/lib/python3.11/site-packages/uvicorn/server.py", line 70, in serve
    await self._serve(sockets)
  File "/opt/render/project/src/backend/.venv/lib/python3.11/site-packages/uvicorn/server.py", line 77, in _serve
    config.load()
  File "/opt/render/project/src/backend/.venv/lib/python3.11/site-packages/uvicorn/config.py", line 435, in load
    self.loaded_app = import_from_string(self.app)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/render/project/src/backend/.venv/lib/python3.11/site-packages/uvicorn/importer.py", line 19, in import_from_string
    module = importlib.import_module(module_str)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "<frozen importlib._bootstrap>", line 1204, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1176, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1147, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 690, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 940, in exec_module
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
  File "/opt/render/project/src/backend/src/discovita/app.py", line 9, in <module>
    from .api.router import router
  File "/opt/render/project/src/backend/src/discovita/api/router.py", line 4, in <module>
    from .routes import image_generation, face_swap, upload, image_description
  File "/opt/render/project/src/backend/src/discovita/api/routes/__init__.py", line 4, in <module>
    from . import face_swap
  File "/opt/render/project/src/backend/src/discovita/api/routes/face_swap.py", line 8, in <module>
    from ...service.icons8.icons8_service import Icons8Service
  File "/opt/render/project/src/backend/src/discovita/service/icons8/icons8_service.py", line 6, in <module>
    from .client import Icons8Client
  File "/opt/render/project/src/backend/src/discovita/service/icons8/client/__init__.py", line 3, in <module>
    from .client import Icons8Client
  File "/opt/render/project/src/backend/src/discovita/service/icons8/client/client.py", line 5, in <module>
    from ..models import FaceSwapResponse, ImageId, GetBboxResponse
  File "/opt/render/project/src/backend/src/discovita/service/icons8/models.py", line 5, in <module>
    from pydantic import BaseModel, AnyHttpUrl, Field, RootModel
ImportError: cannot import name 'RootModel' from 'pydantic' (/opt/render/project/src/backend/.venv/lib/python3.11/site-packages/pydantic/__init__.cpython-311-x86_64-linux-gnu.so)
==> Deploying...
==> Running './scripts/start.sh'
INFO:     Will watch for changes in these directories: ['/opt/render/project/src/backend']
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [96] using StatReload
2025-02-19 16:22:42,350 - discovita.app - INFO - Environment variables loaded
INFO:     Started server process [98]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     127.0.0.1:43460 - "HEAD / HTTP/1.1" 200 OK
==> No open ports detected on 0.0.0.0, continuing to scan...
==> Docs on specifying a port: https://render.com/docs/web-services#port-binding
==> No open ports detected on 0.0.0.0, continuing to scan...
==> Docs on specifying a port: https://render.com/docs/web-services#port-binding
==> No open ports detected on 0.0.0.0, continuing to scan...
==> Docs on specifying a port: https://render.com/docs/web-services#port-binding
==> No open ports detected on 0.0.0.0, continuing to scan...
==> Docs on specifying a port: https://render.com/docs/web-services#port-binding
==> No open ports detected on 0.0.0.0, continuing to scan...
==> Docs on specifying a port: https://render.com/docs/web-services#port-binding
==> Port scan timeout reached, no open ports detected on 0.0.0.0. Detected open ports on localhost -- did you mean to bind one of these to 0.0.0.0?
==> Docs on specifying a port: https://render.com/docs/web-services#port-binding
==> Deploying...
==> Exited with status 2
==> Common ways to troubleshoot your deploy: https://render.com/docs/troubleshooting-deploys
==> Deploying...
</server-deploy-logs>
    </current-task>
</cline-context>
