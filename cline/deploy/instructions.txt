Discovita Project Structure and Deployment Guide
===========================================

Directory Structure
------------------
```
/
├── backend/                 # FastAPI backend server
│   ├── src/                # Backend source code
│   ├── requirements.txt    # Python dependencies
│   └── setup.py           # Python package configuration
│
├── frontend/
│   ├── package.json       # Root package.json (manages workspaces)
│   │
│   └── apps/
│       ├── face-swapper/  # Face swapper application
│       │   ├── package.json
│       │   ├── public/
│       │   └── src/
│       │
│       └── coach/         # Life coach application
│           ├── package.json
│           ├── public/
│           └── src/
│
└── scripts/               # Build and deployment scripts
    ├── build.sh          # Build script
    ├── run_project.sh    # Project runner
    └── start.sh          # Start script
```

Application Architecture
-----------------------
The project consists of two frontend applications sharing a single backend:

1. Face Swapper App: Image processing and face swapping interface
2. Life Coach App: AI-powered coaching chat interface

Both apps are served by the same FastAPI backend, which provides:
- API endpoints for both applications
- Static file serving from backend/public/
- Shared services (OpenAI, S3, etc.)

Configuration
------------
Frontend:
- Environment variables via .env files in each app directory
- Default API URL: http://localhost:8000/api/v1
- Configure API URL using REACT_APP_API_BASE_URL

Backend:
- Environment variables via python-dotenv
- Configuration in backend/src/discovita/config.py
- Required variables:
  * OpenAI API key
  * S3 credentials
  * Other service-specific keys

Local Development
----------------
1. Start the backend server:
   ```bash
   cd backend
   uvicorn discovita.app:app --reload
   ```

2. Run a frontend app:
   ```bash
   # For face-swapper
   ./scripts/run_project.sh face-swapper

   # For coach app
   ./scripts/run_project.sh coach
   ```

This will:
- Install dependencies
- Build the selected frontend app
- Copy build files to backend/public/
- Start the development server

Production Deployment
-------------------
1. Build the application:
   ```bash
   ./scripts/build.sh <app-name>
   ```
   Where <app-name> is either 'face-swapper' or 'coach'

2. Start the production server:
   ```bash
   ./scripts/start.sh
   ```

The build process:
1. Creates a Python virtual environment
2. Installs backend dependencies
3. Installs frontend dependencies for the selected app
4. Builds the frontend app
5. Copies build files to backend/public/

The production server:
- Serves the API endpoints
- Serves the built frontend app from backend/public/
- Runs with production-optimized settings

Note: Each deployment should be for a single frontend app. While the backend supports both apps, deploy them separately if both are needed in production.
